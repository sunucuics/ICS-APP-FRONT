import 'package:dio/dio.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../core/network/api_client.dart';
import '../../../core/network/api_endpoints.dart';
import '../../../core/models/user_model.dart';
import '../../../core/services/firebase_auth_service.dart';
import '../../../core/services/fcm_service.dart';

class AuthApiService {
  final ApiClient _apiClient = ApiClient.instance;

  // Register - Client-first approach: Firebase ile kullanÄ±cÄ± oluÅŸtur, sonra backend'e profil yazdÄ±r
  Future<AuthResponse> register(RegisterRequest request) async {
    print(
        'ğŸš€ AuthApiService: Starting client-first registration for email: ${request.email}');
    UserCredential? userCredential;

    try {
      // 1. Firebase'de kullanÄ±cÄ± oluÅŸtur
      print('ğŸš€ AuthApiService: Creating Firebase user...');
      userCredential = await FirebaseAuthService.createUserWithEmailAndPassword(
        email: request.email,
        password: request.password,
      );
      print('ğŸš€ AuthApiService: Firebase user created successfully');

      if (userCredential?.user == null) {
        throw Exception('Failed to create Firebase user');
      }

      // 2. Taze ID token al (force refresh)
      final idToken = await userCredential!.user!.getIdToken(true);
      print('ğŸš€ AuthApiService: Got fresh ID token');

      // 3. FCM token'Ä± al
      final fcmToken = await FCMService.getFCMToken();
      print('ğŸš€ AuthApiService: FCM Token: $fcmToken');

      // 4. Backend'e profil yazdÄ±r (Authorization header ile)
      print('ğŸš€ AuthApiService: Sending profile to backend...');
      final formData = FormData.fromMap({
        'name': request.name,
        'phone': request.phone, // Backend expects "555 123 4567" format
        'email': request.email,
        'password': request.password, // Backend validation iÃ§in gerekli
        if (fcmToken != null) 'fcm_token': fcmToken,
      });

      final response = await _apiClient.postMultipart(
        ApiEndpoints.authRegister,
        formData,
        options: Options(
          headers: {
            'Authorization': 'Bearer $idToken',
          },
        ),
      );
      print('ğŸš€ AuthApiService: Backend profile creation successful');

      // 5. Backend'den dÃ¶nen user profile'Ä±nÄ± kullan
      final userProfile = UserProfile.fromJson(response.data['user']);

      // Client-first'te backend token'larÄ± boÅŸ dÃ¶ner, Firebase'deki token'larÄ± kullan
      return AuthResponse(
        userId: response.data['user_id'],
        user: userProfile,
        idToken: idToken ?? '', // Firebase'den alÄ±nan token
        refreshToken: '', // Firebase otomatik yÃ¶netir
        expiresIn: 3600, // Firebase default
      );
    } catch (e) {
      print('ğŸš€ AuthApiService: Registration failed with error: $e');
      print('ğŸš€ AuthApiService: Error type: ${e.runtimeType}');

      // EÄŸer kullanÄ±cÄ± zaten kayÄ±tlÄ± hatasÄ± alÄ±ndÄ±ysa, Firebase kullanÄ±cÄ±sÄ±nÄ± temizleme
      // Ã‡Ã¼nkÃ¼ kullanÄ±cÄ± zaten giriÅŸ yapmÄ±ÅŸ durumda
      if (e.toString().contains('Bu kullanÄ±cÄ± zaten kayÄ±tlÄ±') ||
          e.toString().contains('Bu e-posta zaten kayÄ±tlÄ±')) {
        print(
            'ğŸš€ AuthApiService: User already exists, keeping Firebase user signed in');

        // KullanÄ±cÄ± zaten giriÅŸ yapmÄ±ÅŸ, profil bilgilerini Ã§ek
        try {
          final userProfile = await getCurrentUser();
          return AuthResponse(
            userId: userCredential!.user!.uid,
            user: userProfile,
            idToken: await userCredential.user!.getIdToken() ?? '',
            refreshToken: '',
            expiresIn: 3600,
          );
        } catch (profileError) {
          print('ğŸš€ AuthApiService: Failed to get user profile: $profileError');
          // Profil Ã§ekilemezse Firebase kullanÄ±cÄ±sÄ±nÄ± temizle
          await userCredential!.user!.delete();
          await FirebaseAuthService.signOut();
          rethrow;
        }
      }

      // DiÄŸer hatalar iÃ§in Firebase kullanÄ±cÄ±sÄ±nÄ± temizle
      if (userCredential?.user != null) {
        print('ğŸš€ AuthApiService: Cleaning up Firebase user due to error...');
        try {
          await userCredential!.user!.delete();
          await FirebaseAuthService.signOut();
          print('ğŸš€ AuthApiService: Firebase user cleaned up');
        } catch (cleanupError) {
          print(
              'ğŸš€ AuthApiService: Failed to cleanup Firebase user: $cleanupError');
          await FirebaseAuthService.signOut(); // En azÄ±ndan sign out yap
        }
      }

      // Hata mesajÄ±nÄ± yeniden fÄ±rlat
      rethrow;
    }
  }

  // Login - Firebase ile giriÅŸ yap (Ã¶nerilen yaklaÅŸÄ±m)
  Future<AuthResponse> login(LoginRequest request) async {
    print(
        'ğŸš€ AuthApiService: Starting Firebase login for email: ${request.email}');

    try {
      // 1. Firebase ile giriÅŸ yap - Android iÃ§in timeout artÄ±rÄ±ldÄ±
      final userCredential =
          await FirebaseAuthService.signInWithEmailAndPassword(
        email: request.email,
        password: request.password,
      );

      if (userCredential?.user == null) {
        throw Exception('Failed to sign in with Firebase');
      }

      print('ğŸš€ AuthApiService: Firebase login successful');

      // 2. Android iÃ§in token refresh timeout'u artÄ±r
      final idToken = await userCredential!.user!.getIdToken(true);
      print('ğŸš€ AuthApiService: Got fresh ID token');

      // 3. FCM token'Ä± backend'e gÃ¶nder (opsiyonel) - Android iÃ§in timeout artÄ±rÄ±ldÄ±
      final fcmToken = await FCMService.getFCMToken();
      if (fcmToken != null) {
        try {
          // JSON formatÄ±nda gÃ¶nder, FormData kullanma
          final response = await _apiClient.post(
            ApiEndpoints.authLogin,
            data: {
              'email': request.email,
              'password': request.password,
              'fcm_token': fcmToken,
            },
            options: Options(
              sendTimeout: const Duration(seconds: 30),
              receiveTimeout: const Duration(seconds: 30),
            ),
          );
          print('ğŸš€ AuthApiService: FCM token updated on login');
        } catch (e) {
          print('ğŸš€ AuthApiService: Failed to update FCM token: $e');
          // FCM token gÃ¼ncelleme hatasÄ± login'i engellemez
        }
      }

      // 4. User profile'Ä±nÄ± Ã§ek
      final userProfile = await getCurrentUser();

      return AuthResponse(
        userId: userCredential.user!.uid,
        user: userProfile,
        idToken: idToken ?? '',
        refreshToken: '', // Firebase otomatik yÃ¶netir
        expiresIn: 3600, // Firebase tokens expire in 1 hour
      );
    } catch (e) {
      print('ğŸš€ AuthApiService: Login failed with error: $e');
      rethrow;
    }
  }

  // Reset Password - Backend endpoint kullan (FIREBASE_WEB_API_KEY gerekli)
  Future<void> resetPassword(String email) async {
    print('ğŸš€ AuthApiService: Sending password reset for email: $email');

    try {
      // Backend endpoint'ini kullan (Firebase REST API proxy)
      await _apiClient.post(
        ApiEndpoints.authResetPassword,
        queryParameters: {'email': email},
      );
      print('ğŸš€ AuthApiService: Password reset email sent successfully');
    } catch (e) {
      print('ğŸš€ AuthApiService: Password reset failed: $e');
      // Fallback: Firebase SDK kullan
      print('ğŸš€ AuthApiService: Falling back to Firebase SDK...');
      await FirebaseAuthService.sendPasswordResetEmail(email);
    }
  }

  // Logout - Backend logout endpoint'ini Ã§aÄŸÄ±r, sonra Firebase'den Ã§Ä±k
  Future<void> logout() async {
    print('ğŸš€ AuthApiService: Starting logout process');

    try {
      // 1. Backend logout endpoint'ini Ã§aÄŸÄ±r (tÃ¼m refresh token'larÄ± iptal eder)
      final idToken = await FirebaseAuthService.getIdToken();
      if (idToken != null) {
        print('ğŸš€ AuthApiService: Calling backend logout endpoint');
        await _apiClient.post(
          ApiEndpoints.authLogout,
          options: Options(
            headers: {
              'Authorization': 'Bearer $idToken',
            },
          ),
        );
        print('ğŸš€ AuthApiService: Backend logout successful');
      } else {
        print('ğŸš€ AuthApiService: No ID token found, skipping backend logout');
      }
    } catch (e) {
      print('ğŸš€ AuthApiService: Backend logout failed: $e');
      // Continue with Firebase logout even if backend call fails
    } finally {
      // 2. Firebase'den Ã§Ä±k
      print('ğŸš€ AuthApiService: Signing out from Firebase');
      await FirebaseAuthService.signOut();
      print('ğŸš€ AuthApiService: Firebase logout completed');
    }
  }

  // Get current user profile
  Future<UserProfile> getCurrentUser() async {
    final response = await _apiClient.get(ApiEndpoints.userProfile);
    return UserProfile.fromJson(response.data);
  }
}
